Poly XORCipher

PARAMS can be swap between 4 parameters

RDI, RSI, RDX, RCX

0000000000400169 <XORCipher>:
  400169:	48 83 ec 10          	sub    $0x10,%rsp
  40016d:	89 0c 24             	mov    %ecx,(%rsp)
  400170:	89 54 24 04          	mov    %edx,0x4(%rsp)
  400174:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  40017b:	00 00

000000000040017d <XORCipher.xor_loop>:
  40017d:	48 31 d2             	xor    %rdx,%rdx
  400180:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  400185:	f7 34 24             	divl   (%rsp)
  400188:	48 89 f0             	mov    %rsi,%rax
  40018b:	48 01 d0             	add    %rdx,%rax
  40018e:	0f b6 10             	movzbl (%rax),%edx
  400191:	48 89 f9             	mov    %rdi,%rcx
  400194:	48 03 4c 24 08       	add    0x8(%rsp),%rcx
  400199:	0f b6 09             	movzbl (%rcx),%ecx
  40019c:	31 ca                	xor    %ecx,%edx
  40019e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  4001a3:	48 8d 0c 07          	lea    (%rdi,%rax,1),%rcx
  4001a7:	88 11                	mov    %dl,(%rcx)
  4001a9:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  4001ae:	48 83 c0 01          	add    $0x1,%rax
  4001b2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  4001b7:	3b 44 24 04          	cmp    0x4(%rsp),%eax
  4001bb:	72 c0                	jb     40017d <XORCipher.xor_loop>
  4001bd:	48 83 c4 10          	add    $0x10,%rsp
  4001c1:	c3


Permuable instruction i use
-------------------------------------------------------------------
Instruction                        | OpCodes          | total bytes
-------------------------------------------------------------------
xor rdx, rdx                       | 48 31 d2         |      3
-------------------------------------------------------------------
mov rax, rsi                       | 48 89 f0         |      3
-------------------------------------------------------------------
mov rcx, rdi                       | 48 89 f9         |      3  
-------------------------------------------------------------------
add rax, 1                         | 48 83 c0 01      |      4
-------------------------------------------------------------------

[1] xor rdx, rdx
~~~~~~~~~~~~~~~~~~

        JUNK
    a)  xor rdx, rdx        [48 31 d2 90 90 90 90 90]              -01
        JUNk

    b)  JUNK
      mov rdx, 0            [ba 00 00 00 00]        -02

    c)  mov rax, 0          [b8 00 00 00 00]        -03
        JUNK
        xchg rdx, rax       [48 92]                 -04
        JUNK

    d)  sub rdx, rdx        [48 29 d2]              -05
        JUNK

    e)  xor rax, rax        [48 31 c0]              -06
        JUNK
        mov rdx, rax        [48 89 c2]              -07


  4002cb:	48 89 f0             	mov    %rsi,%rax
  4002ce:	48 96                	xchg   %rax,%rsi
  4002d0:	48 89 c6             	mov    %rax,%rsi
  4002d3:	48 31 c0             	xor    %rax,%rax
  4002d6:	48 01 f0             	add    %rsi,%rax
  4002d9:	48 29 c0             	sub    %rax,%rax
  4002dc:	48 01 f0             	add    %rsi,%rax
  4002df:	56                   	push   %rsi
  4002e0:	58                   	pop    %rax
[2] mov rax, rsi    

    a)  mov rax, rsi        [48 89 f0]

    b)  xchg rax, rsi       [48 96]
        mov rsi, rax        [48 89 c6]

    c)  xor rax, rax        [48 31 c0]
        add rax, rsi        [48 01 f0]
    
    d)  sub rax, rax        [48 29 c0]
        add rax, rsi        [48 01 f0]

    e)  push rsi            [56]
        pop rax             [58]

[3] mov rcx, rdi

    a)  mov rcx, rdi        [48 89 f9]

    b)  xchg rcx, rdi       [48 87 cf]
        mov rdi, rcx        [48 89 cf]

    c)  push rdi            [57]
        pop rcx             [59]

    d)  sub rcx, rcx        [48 29 c9]
        mov rcx, rdi        [48 89 f9]

    e)  xor rcx, rcx        [48 31 c9]
        mov rcx, rdi        [48 89 f9]

db 0x01, 0x05, 0xFD, 0x48, 0x31, 0xd2, 0x90, 0x90, 0x90, 0x90, 0x90, 0xFD, 0xba, 0x00, 0x00, 0x00, 0x00, 0x90, 0x90, 0x90, 0xFD, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x48, 0x92, 0x90, 0xFD, 0x48, 0x29, 0xc9, 0x90, 0x90, 0x90, 0x90, 0x90, 0xFD, 0x48, 0x31, 0xc0, 0x48, 0x89, 0xc2, 0x90, 0x90, 0xFE

[4] add rax, 1

    a)  add rax, 1          [48 83 c0 01]

    b)  inc rax             [48 ff c0]

    c)  mov rdx, 1          [ba 01 00 00 00]
        add rax, rdx        [48 01 d0]
    

    TMP=>
    d)  xor rdx, rdx        [48 31 d2]
        inc rdx             [48 ff c2]
        add rax, rdx        [48 01 d0]





[5] [8][1][8][1][8][1][8][1][8][2]


4*8 = 32